<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>MyREST</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
    <!-- 指定Spring的配置文件 -->
  	<context-param>
  		<param-name>contextConfigLocation</param-name>
  		<param-value>/WEB-INF/classes/ApplicationContext.xml</param-value>
  	</context-param>
  
  	<!-- Spring的上下文监听器， 该监听器实现了ServletContextListener接口，即在容器加载整个
  		应用程序的时候调用其中的方法，其中会引用<context-param>配置中的contextConfigLocation，
  		从而完成Spring的加载和配置工作
  	-->
  	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  	</listener>
  	<listener>
		<listener-class>niuzhixiang.config.ConfigurationProcessor</listener-class>
  	</listener>
 	
 	<!-- 传统的过滤器配置 -->
	<!--   <filter>
			<filter-name>Authority</filter-name>
			<filter-class>niuzhixiang.filter.AuthorityFilter</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>Authority</filter-name>
			<url-pattern>/*</url-pattern>
  		</filter-mapping> -->
	
	<!-- 使用Spring提供的OpenSessionInView，将数据库事务的粒度控制在页面层，使得Hibernate可以实现延迟加载。
		也可以将事务粒度控制在Service层或Dao层（更细粒度），但是这样一旦事务方法（在Service层或者Dao层用@Transactional
		注解的方法）调用完毕返回之后事务会话就会关闭，在稍后需要延迟加载数据时就会报错（No Session）
	 -->
 	<filter>  
    	<filter-name>HibernateOpenSession</filter-name>   
    	<filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>  
    	<init-param>  
        	<param-name>sessionFactoryBeanName</param-name>  
        	<param-value>HibernateSessionFactory</param-value>  
    	</init-param>  
	</filter>
	<!-- 由于在过滤器中要由Spring依赖注入，所以要用这种写法配置过滤器，而不采用上面的传统配置写法 -->
	<!-- 自动登陆过滤器 -->
    <filter>
        <filter-name>AutoLogonFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetBeanName</param-name>
            <param-value>AutoLogonFilter</param-value>        
        </init-param>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
	<!-- 身份验证过滤器 -->
	<filter>
        <filter-name>AuthorityFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetBeanName</param-name>
            <param-value>AuthorityFilter</param-value>        
        </init-param>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!-- 主页重定向过滤器 -->
    <filter>
			<filter-name>HomeRedirect</filter-name>
			<filter-class>niuzhixiang.filter.HomeRedirectFilter</filter-class>
	</filter>

	<!-- 配置过滤器映射 -->
	<!-- OpenSessionInView过滤器，要过滤所有请求 -->
 	<filter-mapping>  
    	<filter-name>HibernateOpenSession</filter-name>  
    	<url-pattern>/*</url-pattern>  
	</filter-mapping>
	<!-- 自动登陆过滤器只需过滤请求为根路径(即http://localhost/MyREST)的请求 -->
	<filter-mapping>
        <filter-name>AutoLogonFilter</filter-name>
        <url-pattern>/</url-pattern>
    </filter-mapping>
    <!-- 身份验证过滤器要过滤所有请求 -->
    <filter-mapping>
        <filter-name>AuthorityFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- 主页重定向过滤器只需过滤“/user/”URI空间的请求 -->
	<filter-mapping>
			<filter-name>HomeRedirect</filter-name>
			<url-pattern>/user/*</url-pattern>
  	</filter-mapping> 

	
	<!-- 配置CXFServlet，将所有请求都交由CXFServlet处理 -->
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>
	
</web-app>